# -*- coding: utf-8 -*-
"""UTS Model Deployment no 2 - Axel Dimas A/2702274015

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nGBDiJ4VcP_Tx44tTfaMTqCW2vV-2Txq
"""

import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score, classification_report
from xgboost import XGBClassifier

class LoanApprovalModel:
    def __init__(self, dataset_path):
        self.dataset = pd.read_csv(dataset_path)
        self.label_encoder = LabelEncoder()
        self.imputer = SimpleImputer(strategy='median')
        self.xgb_model = XGBClassifier(random_state=42)
        self.best_model = self.xgb_model

    def preprocess_data(self):
        self.dataset['person_gender'] = self.label_encoder.fit_transform(self.dataset['person_gender'])
        self.dataset['person_education'] = self.label_encoder.fit_transform(self.dataset['person_education'])
        self.dataset['person_home_ownership'] = self.label_encoder.fit_transform(self.dataset['person_home_ownership'])
        self.dataset['loan_intent'] = self.label_encoder.fit_transform(self.dataset['loan_intent'])
        self.dataset['previous_loan_defaults_on_file'] = self.label_encoder.fit_transform(self.dataset['previous_loan_defaults_on_file'])

        X = self.dataset.drop('loan_status', axis=1)
        y = self.dataset['loan_status']

        X_imputed = self.imputer.fit_transform(X)
        return X_imputed, y

    def train_model(self, X_train, X_test, y_train, y_test):

        self.xgb_model.fit(X_train, y_train)
        xgb_pred = self.xgb_model.predict(X_test)
        xgb_accuracy = accuracy_score(y_test, xgb_pred)

        print(f"XGBoost selected with accuracy: {xgb_accuracy}")
        pickle.dump(self.xgb_model, open('best_model.pkl', 'wb'))

    def evaluate(self, X_test, y_test):
        pred = self.xgb_model.predict(X_test)
        return classification_report(y_test, pred)